
 /*! \page page_pdiff Time Derivatives of Positions

This library defines an \ref pdiff_interface "interface" for a time derivative of the position of a point to enable different representations of the time derivative (linear velocity 3D-vector, homogeneous velocity, etc.) and different \ref pdiff_implementations "implementations" (based on Eigen, Bullet, etc.). 
The section \ref pdiff_interface "Interface" describes the functionalities, whereas the section \ref pdiff_implementations "Implementation" shows some examples.

\tableofcontents

\section pdiff_interface Interface
The class kindr::positions::PositionDiffBase serves as an interface for a velocity of a point. All types of representations of a velocity, such as 3D-vector and homogeneous coordinate, are derived from this base class.

\subsection pdiff_zero Zero
The default constructor always initializes all velocities equal to zero.

All velocities can be set to zero by the function \ref kindr::positions::PositionDiffBase::setZero() "setZero()".

\subsection pdiff_addition_and_subtraction Addition and Subtraction
Addition and subtraction of linear velocities are provided by the kindr::positions::PositionDiffBase::operator+ and kindr::positions::PositionDiffBase::operator-, respectively.



\subsection pdiff_interfaces_representations Representations of Time Derivatives of a Position
The following representations are currently provided by the library:

\subsubsection pdiff_interfaces_velocity3 3-dimensional Linear Velocity
The class kindr::positions::LinearVelocityBase defines an interface for a 3D-vector representation of a linear velocity in 3D-Space.
The linear velocity of point P expressed in frame A can be stated as:

\f$\boxed{_A\mathbf{v}_{P} = \begin{bmatrix} v_x \\ v_y \\ v_z \end{bmatrix}}\f$

The three components, x, y and z, are stored and can be accessed by
   
 - \ref kindr::positions::LinearVelocityBase::x() "x()"
 - \ref kindr::positions::LinearVelocityBase::y() "y()"
 - \ref kindr::positions::LinearVelocityBase::z() "z()"


\section pdiff_implementations Implementations
Each implementation lies in its own namespace, such that the implementation can be altered later very easily via namespace alias.
For example: 
\code{.cpp}
namespace pos = kindr::positions::eigen_impl; // select implementation based on Eigen
pos::LinearVelocityD velocity();		     // create 3D-Velocity
\endcode
If the implementation needs to be changed, only one line of code has to be altered:
\code{.cpp}
namespace pos = kindr::positions::bullet_impl; // select implementation based on bullet	
\endcode
\subsection pdiff_eigen Eigen
The library comes along with an implementation based on the <a href="http://eigen.tuxfamily.org">C++ Eigen library</a>.

All types can be included by
\code{.cpp}
#include <kindr/positions/PositionDiffEigen.hpp>
\endcode
and lie within the namespace kindr::positions::eigen_impl.

\subsubsection pdiff_implementation_linearvelocity3 3D Linear Velocity
The class \ref kindr::positions::eigen_impl::LinearVelocity "LinearVelocity" stores the three coordinates of the velocity in 3D-space in Eigen::Matrix<PrimType, 3, 1>.

The following four typedefs are provided for convenience:
 - \ref kindr::positions::eigen_impl::LinearVelocityD "LinearVelocityD" for primitive type double
 - \ref kindr::positions::eigen_impl::LinearVelocityF "LinearVelocityF" for primitive type float

A velocity can be created as follows:
\code{.cpp}
double x = 1.0;
double y = 2.0;
double z = 3.0;
pos::LinearVelocityD velocity1();		     		// creates a 3D-Velocity with all coordinates equal to zero
pos::LinearVelocityD velocity2(x, y, z);	     		// initializes the three coordinates
pos::LinearVelocityD velocity3(Eigen::Vector3d(x, y, z)); 	// creates a velocity from an Eigen vector
\endcode

The coordinates can be obtained as follows:
\code{.cpp}
x = velocity1.x();
y = velocity1.y();
z = velocity1.z();
Eigen::Vector3d vector = velocity1.toImplementation();	// [x;y;z]
\endcode

Operations with positions:
\code{.cpp}
  pos::LinearVelocityD velocity4 = velocity1 + velocity2;	// addition
  pos::LinearVelocityD velocity3 -= velocity1;		// subtraction
  std::cout << "Velocity 3 is: " << velocity3;		// print velocity
\endcode


<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>



*/