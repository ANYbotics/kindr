/**
 * \defgroup quaternions Quaternions
 *  \see \ref page_quaternion "Chapter Quaternions" 
 */
 
 /*! \page page_quaternion Quaternions
This library defines an \ref quaternion_interface "interface" for quaternions to enable different \ref quaternion_implementations "implementations".

Note that these quaternions should not be used to represent rotations! Use a \ref kindr::RotationQuaternion "RotationQuaternion" instead as explained on page \ref page_rotations "Rotations".
 
\section quaternion_interface Interfaces
The interfaces are declared in \ref QuaternionBase.hpp.
\subsection generic_quaternion Generic Quaternion
The class kindr::QuaternionBase defines the \em interface for a Hamiltonian generic quaternion defined as:

\f$\boxed{\begin{aligned}Q &= q_0 + q_1 i + q_2 j + q_3 k \in \mathbb{H}, \quad q_i \in \mathbb{R} \\
i^2 &= j^2=k^2 = ijk = -1 \\
\end{aligned}}\f$

The interface defines generic functions, such as:
- inversion (kindr::QuaternionBase::invert())
- conjugation (kindr::QuaternionBase::conjugate())
- multiplication (kindr::QuaternionBase::operator*())
- comparison (kindr::QuaternionBase::operator==())

\subsection unit_quternion Unit Quaternion
The class kindr::UnitQuaternionBase defines the \em interface for a Hamiltonian unit quaternion defined as:

\f$\boxed{\begin{aligned}P &= p_0 + p_1 i + p_2 j + p_3 k \in \mathbb{H}, \quad p_i \in \mathbb{R} \\
i^2 &= j^2=k^2 = ijk = -1, \quad \lVert P \rVert= \sqrt{p_0^2 + p_1^2 + p_2^2 + p_3^2} = 1 \\
\end{aligned}}\f$

There are two reasons why there is an extra class for unit quaternions:
- Mathematical properties of a unit quaternion, such as the inverse is equal to the conjugate, can be exploited to increase computational speed.
- The unit length can be guaranteed.

\section quaternion_implementations Implementation

Eigen provides a Eigen::Quaternion, which is used as a primitive for a quaternion.

To use the quaternions based on Eigen, include the following header:
\code{.cpp}
#include <kindr/Core>
\endcode

\subsection generic_quaternion_eigen Generic Quaternion

The class kindr::Quaternion implements a Hamiltonian generic quaternion.

The coefficients are defined as

\f$\boxed{Q = w + x i + yj + z k}\f$

The following two typedefs are provided for convenience:
 - \ref kindr::QuaternionF "QuaternionF" for float
 - \ref kindr::QuaternionD "QuaternionD" for double

Example code to create a quaternion:
\code{.cpp}
namespace quat = kindr::eigen_impl; // select implementation based on Eigen
quat::QuaternionD quat1;				// creates a quaternion with all coefficients equal to zero
quat::QuaternionD quat2(1.0, 2.0, 3.0, 4.0); //creates a quaternion with w=1, x=2, y=3, z=4	
\endcode

\subsection unit_quaternion_eigen Unit Quaternion

The class kindr::UnitQuaternion implements a Hamiltonian unit quaternion.

The following two typedefs are provided for convenience:
 - \ref kindr::UnitQuaternionF "UnitQuaternionF" for float
 - \ref kindr::UnitQuaternionD "UnitQuaternionD" for double


The class only checks if the quaternion has unit length if the code is built with debugging symbols, i.e. #define NDEBUG exists. If the unit quaternion has not unit length, an exception will be thrown.  

\subsection generic_unit_quaternion_eigen Conversion between Generic Quaternion and Unit Quaternion

Conversion by constructor:
\code{.cpp}
UnitQuaternionD uquat;
QuaternionD quat(uquat);
UnitQuaternionD uquat2(quat); // error (not allowed)
UnitQuaternionD uquat3(quat.toUnitQuaternion()); // normalizes the quaternion
\endcode

Conversion by assignment:
\code{.cpp}
UnitQuaternionD uquat;
QuaternionD quat;
quat = uquat;
uquat = quat; // error (not allowed)
uquat = quat.toUnitQuaternion();  // normalizes the quaternion
\endcode



<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>



*/